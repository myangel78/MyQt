#pragma once

#include <QString>
#include <QDebug>
#include <qcolor.h>
#include <array>
#include <memory>

#ifdef QT_NO_DEBUG
#else
#define EASY_PROGRAM_DEBUGGING
#endif

#define QTableView_QSS_ALtColor     "QTableView::item{selection-background-color:DeepSkyBlue;}"
#define BUFFER_SIZE 4096

#define SHIELDING_TEMPERATURE_CONTROL
constexpr int CHANNEL_NUM = 1024;
constexpr int LVDS_SAMPLE_KIINDS_NUM = 4;

constexpr int LVDS_DAC_MAXHEX_TWO_POW_SIXTEEN = 65536;
constexpr int LVDS_DAC_MAXHEX_TWO_POW_SIXTEEN_HALF = 32768;
constexpr double FLOAT_COMPARE_POSITIVE = 0.000001;

constexpr int LVDS_CVT_RAW_MIDDLE = 34515;
constexpr int LVDS_CVT_ADC_MIDDLE = 0;

constexpr int LVDS_CVT_LSB_RAW_5K_COL = 3;
constexpr int LVDS_CVT_LSB_5K_COL = 4;

constexpr int LVDS_CVT_LSB_RAW_10K_COL = 6;
constexpr int LVDS_CVT_LSB_10K_COL  = 7;

constexpr int LVDS_CVT_LSB_RAW_20K_COL = 9;
constexpr int LVDS_CVT_LSB_20K_COL  = 10;

constexpr int LVDS_CVT_LSB_RAW_3_75K_COL = 12;
constexpr int LVDS_CVT_LSB_3_75K_COL = 13;
constexpr int SENSOR_STATE_REG_NUM = 128;

constexpr double  PI_VALUE = 3.14159265358979323846;

constexpr int SENSOR_GROUP_NUM = 4;
constexpr int CHANNEL_FUNCTION_STATE_NUM = 4;
constexpr int SENSOR_STATE_NUM = 16;
constexpr int PORE_STATE_NUM = 6;
constexpr int CAP_STATE_NUM = 5;
constexpr int OVF_STATE_NUM = 2;
constexpr int LOCK_OPERATE_STATE_NUM = 2;
constexpr int VALID_STATE_NUM = 2;
constexpr int MUX_STATE_NUM = SENSOR_GROUP_NUM;

const std::string PROGRAME_PASSWORD = {"WTG30"};



constexpr uint PowOfTwo[32] =
{
    0x01 ,0x03 ,0x07 ,0x0f ,0x1f ,0x3f ,0x7f ,0xff ,0x1ff ,0x3ff ,0x7ff ,0xfff ,0x1fff ,
    0x3fff ,0x7fff ,0xffff ,0x1ffff ,0x3ffff ,0x7ffff ,0xfffff ,0x1fffff ,
    0x3fffff ,0x7fffff ,0xffffff ,0x1ffffff ,0x3ffffff ,0x7ffffff ,0xfffffff ,
    0x1fffffff ,0x3fffffff ,0x7fffffff ,0xffffffff,
};

const std::string gSensorStateStr[SENSOR_STATE_NUM] = {"Off","A","B","C","D","All source","A unblock","B unblock"\
                                                      ,"C unblock","D unblock","A source","B source","C source","D source"\
                                                      ,"VCM res","VCM"};
const std::string CHANNEL_FUNCTION_STATE_STR[CHANNEL_FUNCTION_STATE_NUM] = {"Normal","Unblock","Internal source","Shut off"};

const QStringList SENSRO_SELECT_MODE_STR = {" A "," B "," C "," D ","Off","Internal source","Mux"};
const QStringList SENSRO_STR = {" A "," B "," C "," D "};
const QStringList SENSRO_FULLSTR = {"Sensor A","Sensor B","Sensor C","Sensor D"};

static const QColor gSensorStateColr[SENSOR_STATE_NUM] =
{
    QColor(169,169,169),     QColor(202,235,216),    QColor(128,118,105),
    QColor(255,235,205), QColor(255,245,238),    QColor(255,0,0),
    QColor(227,23,13),   QColor(255,127,80),     QColor(255,192,203),
    QColor(116,0,0),     QColor(255,255,0),      QColor(227,207,87),
    QColor(255,125,64),  QColor(255,227,132),    QColor(85,102,0),
    QColor(0,255,0)
};

const std::string gPoreStateStr[PORE_STATE_NUM] = {"None_pore","Single pore","Multi pore","Saturated pore","Inactive pore","Slip pore"};

static const QColor gPoreStateColr[PORE_STATE_NUM] =
{
    QColor(202,235,216),    QColor(34,139,34), QColor(218,165,32),
    QColor(255,0,0),    QColor(192,192,192),   QColor(128,128,128),
};


const std::string gCapStateStr[CAP_STATE_NUM] = {"Cap_level1","Cap_level2","Cap_level3","Cap_level4","Cap_level5"};

static const QColor gCapStateColr[CAP_STATE_NUM] =
{
    QColor(202,235,216),    QColor(135,206,250), QColor(34,139,34),
    QColor(218,165,32),    QColor(255,0,0),
};

const std::string gOVFStateStr[OVF_STATE_NUM] = {"Normal","Over_flow"};

static const QColor gOVFStateColr[OVF_STATE_NUM] =
{
    QColor(34,139,34),  QColor(255,0,0),
};

const std::string gLockStateStr[LOCK_OPERATE_STATE_NUM] = {"Allow","Prohibited"};
static const QColor gLockStateColr[LOCK_OPERATE_STATE_NUM] =
{
    QColor(0,255,127),  QColor(128,128,128),
};

const std::string gValidStateStr[VALID_STATE_NUM] = {"Invalid","Valid"};
static const QColor gValidStateColr[VALID_STATE_NUM] =
{
    QColor(128,128,128),  QColor(0,255,127),
};
const std::string gMuxGroupStateStr[SENSOR_GROUP_NUM] = {"Sensor A","Sensor B","Sensor C","Sensor D"};
static const QColor gMuxGroupStateColr[SENSOR_GROUP_NUM] =
{
    QColor(255,0,0),  QColor(0,85,255), QColor(85,255,255),  QColor(255,255,0),
};

typedef enum{
    INPUT_3_75K_CURRENT_RANGE_46_875PA   = 15,
    INPUT_3_75K_CURRENT_RANGE_93_75PA    = 14,
    INPUT_3_75K_CURRENT_RANGE_117_1875PA = 7,
    INPUT_3_75K_CURRENT_RANGE_187_5PA    = 13,
    INPUT_3_75K_CURRENT_RANGE_234_375PA  = 12,
    INPUT_3_75K_CURRENT_RANGE_375PA      = 9,
    INPUT_3_75K_CURRENT_RANGE_468_75PA   = 8,
    INPUT_3_75K_CURRENT_RANGE_589_9375PA = 4,
    INPUT_3_75K_CURRENT_RANGE_937_5PA    = 1,
    INPUT_3_75K_CURRENT_RANGE_1171_875PA = 0,
}INPUT_3_75K_CURRENT_RANGE_ENUM;

typedef enum{
    INPUT_5K_CURRENT_RANGE_62_5PA   = 15,
    INPUT_5K_CURRENT_RANGE_125PA    = 14,
    INPUT_5K_CURRENT_RANGE_156_25PA = 7,
    INPUT_5K_CURRENT_RANGE_250PA    = 13,
    INPUT_5K_CURRENT_RANGE_312_5PA  = 12,
    INPUT_5K_CURRENT_RANGE_500PA    = 9,
    INPUT_5K_CURRENT_RANGE_625PA    = 8,
    INPUT_5K_CURRENT_RANGE_781_25PA = 4,
    INPUT_5K_CURRENT_RANGE_1250PA   = 1,
    INPUT_5K_CURRENT_RANGE_1562_5PA = 0,
}INPUT_5K_CURRENT_RANGE_ENUM;

typedef enum{
    INPUT_10K_CURRENT_RANGE_125PA   = 15,
    INPUT_10K_CURRENT_RANGE_250PA   = 14,
    INPUT_10K_CURRENT_RANGE_312_5PA = 7,
    INPUT_10K_CURRENT_RANGE_500PA   = 13,
    INPUT_10K_CURRENT_RANGE_625PA   = 12,
    INPUT_10K_CURRENT_RANGE_1000PA  = 9,
    INPUT_10K_CURRENT_RANGE_1250PA  = 8,
    INPUT_10K_CURRENT_RANGE_1562_5PA= 4,
    INPUT_10K_CURRENT_RANGE_2500PA  = 1,
    INPUT_10K_CURRENT_RANGE_3125PA  = 0,
}INPUT_10K_CURRENT_RANGE_ENUM;

typedef enum{
    INPUT_20K_CURRENT_RANGE_250PA   = 15,
    INPUT_20K_CURRENT_RANGE_500PA   = 14,
    INPUT_20K_CURRENT_RANGE_625PA   = 7,
    INPUT_20K_CURRENT_RANGE_1000PA  = 13,
    INPUT_20K_CURRENT_RANGE_1250PA  = 12,
    INPUT_20K_CURRENT_RANGE_2000PA  = 9,
    INPUT_20K_CURRENT_RANGE_2500PA  = 8,
    INPUT_20K_CURRENT_RANGE_3125PA  = 4,
    INPUT_20K_CURRENT_RANGE_5000PA  = 1,
    INPUT_20K_CURRENT_RANGE_6250PA  = 0,
}INPUT_20K_CURRENT_RANGE_ENUM;

typedef enum{
    TIA_GAIN_RANGE_2X = 0,
    TIA_GAIN_RANGE_2_5X ,
    TIA_GAIN_RANGE_5X_DEFAULT,
    TIA_GAIN_RANGE_10X,
}TIA_GAIN_RANGE_ENUM;

typedef enum{
    LPF_CONER_FREQ_BYPASS = 0,
    LPF_CONER_FREQ_300K = 2,
    LPF_CONER_FREQ_150K = 6,
    LPF_CONER_FREQ_75K = 4,
    LPF_CONER_FREQ_37_5K_DEFAULT = 1,
    LPF_CONER_FREQ_20K = 3, //3,5,7
}LPF_CONER_FREQ_ENUM;

typedef enum{
    TIA_VCM_0_5_VDD_DEFAULT = 0,
    TIA_VCM_0_45_VDD = 1,
    TIA_VCM_0_4_VDD = 2,
    TIA_VCM_0_35_VDD = 3,
}TIA_VCM_VDD_ENUM;

typedef enum{
    ADC_FREQ_SET_5K_DEFAULT = 0,
    ADC_FREQ_SET_10K = 1,
    ADC_FREQ_SET_20K = 2,
    ADC_FREQ_SET_3_75K = 3,
}ADC_FREQ_SET_ENUM;

typedef enum
{
    SPLITTER_HIDE_DIRECT_NONE = 0,
    SPLITTER_HIDE_DIRECT_LEFT,
    SPLITTER_HIDE_DIRECT_RIGHT,
    SPLITTER_HIDE_DIRECT_TOP,
    SPLITTER_HIDE_DIRECT_BOTTOM
}SPLITTER_HIDDEN_DIRECTION_ENUM;

typedef enum{
    SENSOR_STATE_OFF = 0,
    SENSOR_STATE_A_NORMAL = 1,
    SENSOR_STATE_B_NORMAL = 2,
    SENSOR_STATE_C_NORMAL = 3,
    SENSOR_STATE_D_NORMAL = 4,
    SENSOR_STATE_ALL_INTERNAL_CURRENT = 5,
    SENSOR_STATE_A_UNBLOCK_VOLT = 6,
    SENSOR_STATE_B_UNBLOCK_VOLT = 7,
    SENSOR_STATE_C_UNBLOCK_VOLT = 8,
    SENSOR_STATE_D_UNBLOCK_VOLT = 9,
    SENSOR_STATE_A_INTERNAL_CURRENT = 10,
    SENSOR_STATE_B_INTERNAL_CURRENT = 11,
    SENSOR_STATE_C_INTERNAL_CURRENT = 12,
    SENSOR_STATE_D_INTERNAL_CURRENT = 13,
    SENSOR_STATE_VCM_RESISTER = 14,
    SENSOR_STATE_VCM = 15,
}SENSOR_STATE_ENUM;

enum MUXSCAN_SEQUENCING_ENUM{
    MUXSCAN_UNSEQUENCING = false,
    MUXSCAN_SEQUENCING = true,
};
enum FILTER_AVG_STD_ENUM{
    FILTER_AVG_STD_UNFIT = false,
    FILTER_AVG_STD_FIT = true,
};
enum FILTER_VISIBLE_ENUM{
    FILTER_CURVES_INVISIBLE = false,
    FILTER_CURVES_VISIBLE = true,
};
enum CHANNEL_VALID_ENUM{
    INVALID_CHANNEL_ENUM = false,
    VALID_CHANNEL_ENUM = true,
};
enum POWER_CONSUMPTION_ENUM
{
    ENUM_POWER_CONSUMPTION_LOW = 0,
    ENUM_POWER_CONSUMPTION_HIGH = 1,
};
enum VOLTAGE_INVERTER_ENUM
{
    ENUM_VOLTAGE_OUTPUT_NORMAL = 0,
    ENUM_VOLTAGE_OUTPUT_INVERTER = 1,
};
enum COMPARISON_DIRECTION_ENUM
{
    ENUM_COMPARISON_DIRECTION_GREATER = 0,
    ENUM_COMPARISON_DIRECTION_LESSTHAN= 1,
};
constexpr SENSOR_STATE_ENUM gSensorUnblock[SENSOR_GROUP_NUM] = {SENSOR_STATE_A_UNBLOCK_VOLT, SENSOR_STATE_B_UNBLOCK_VOLT,SENSOR_STATE_C_UNBLOCK_VOLT,SENSOR_STATE_D_UNBLOCK_VOLT};
constexpr SENSOR_STATE_ENUM gSensorNormal[SENSOR_GROUP_NUM] = {SENSOR_STATE_A_NORMAL, SENSOR_STATE_B_NORMAL,SENSOR_STATE_C_NORMAL,SENSOR_STATE_D_NORMAL};
constexpr SENSOR_STATE_ENUM SENSOR_OPENGRP_SATE[SENSOR_GROUP_NUM] = {SENSOR_STATE_A_NORMAL,SENSOR_STATE_B_NORMAL,SENSOR_STATE_C_NORMAL,SENSOR_STATE_D_NORMAL};
constexpr SENSOR_STATE_ENUM SENSOR_OPENGRP_SATETEST[SENSOR_GROUP_NUM] = {SENSOR_STATE_A_INTERNAL_CURRENT,SENSOR_STATE_B_INTERNAL_CURRENT,SENSOR_STATE_C_INTERNAL_CURRENT,SENSOR_STATE_D_INTERNAL_CURRENT,};

constexpr SENSOR_STATE_ENUM SENSORGRP_FUNCT_STATE_TRUNTO_SENSORSTATE[SENSOR_GROUP_NUM][CHANNEL_FUNCTION_STATE_NUM] = {
    {SENSOR_STATE_A_NORMAL, SENSOR_STATE_A_UNBLOCK_VOLT, SENSOR_STATE_A_INTERNAL_CURRENT,SENSOR_STATE_OFF},
    {SENSOR_STATE_B_NORMAL, SENSOR_STATE_B_UNBLOCK_VOLT, SENSOR_STATE_B_INTERNAL_CURRENT,SENSOR_STATE_OFF},
    {SENSOR_STATE_C_NORMAL, SENSOR_STATE_C_UNBLOCK_VOLT, SENSOR_STATE_C_INTERNAL_CURRENT,SENSOR_STATE_OFF},
    {SENSOR_STATE_D_NORMAL, SENSOR_STATE_D_UNBLOCK_VOLT, SENSOR_STATE_D_INTERNAL_CURRENT,SENSOR_STATE_OFF},
};



typedef enum{
    ALL_SENSOR_STATE_A_SELECT = 0,
    ALL_SENSOR_STATE_B_SELECT = 1,
    ALL_SENSOR_STATE_C_SELECT = 2,
    ALL_SENSOR_STATE_D_SELECT= 3,
    ALL_SENSOR_STATE_OFF_SELECT = 4,
    ALL_SENSOR_STATE_INTERNAL_CURRENT_SELECT = 5,
    ALL_SENSOR_STATE_MUX_SELECT = 6,
}ALL_SENSOR_STATE_SELECT_ENUM;

typedef enum{
    SENSOR_STATE_A_GROUP = 0,
    SENSOR_STATE_B_GROUP = 1,
    SENSOR_STATE_C_GROUP = 2,
    SENSOR_STATE_D_GROUP = 3,
}SENSOR_STATE_GROUP_ENUM;

enum SENSOR_GROUP_MODE{
    SENSOR_A_GROUP = 0,
    SENSOR_B_GROUP = 1,
    SENSOR_C_GROUP = 2,
    SENSOR_D_GROUP = 3,
    SENSOR_MIX_GROUP= 4
};
typedef enum{
    SENSORGRP_FUNC_STATE_NORMAL = 0,
    SENSORGRP_FUNC_STATE_UNBLOCK = 1,
    SENSORGRP_FUNC_STATE_INTERNAL_CURRENT_SOURCE = 2,
    SENSORGRP_FUNC_STATE_OFF = 3,
}SENSORGRP_FUNC_STATE_ENUM;


typedef enum{
    NONE_PORE_STATE = 0,
    SINGLE_PORE_STATE = 1,
    MULTI_PORE_STATE = 2,
    SATURATED_PORE_STATE = 3,
    INACTIVE_PORE_STATE = 4,
    SLIP_PORE_STATE = 5,
}PORE_STATE_ENUM;

typedef enum{
    CAP_LEVEL1_STATE = 0,
    CAP_LEVEL2_STATE = 1,
    CAP_LEVEL3_STATE = 2,
    CAP_LEVEL4_STATE = 3,
    CAP_LEVEL5_STATE = 4,
}CAP_STATE_ENUM;

typedef enum{
    UN_OVER_FLOW_FLAG = 0,
    OVER_FLOW_FLAG = 1,
}OVF_STATE_ENUM;



typedef enum{
    ALLOW_OPERATION_STATE = 0,
    PROHIBITED_OPERATION_STATE = 1,
}OPERATE_STATE_ENUM;


typedef enum
{
    SENSOR_STATE_MAP_MODE=0,
    OVF_STATE_MAP_MODE=1,
    CAP_STATE_MAP_MODE=2,
    PORE_STATE_MAP_MODE=3,
    LOCK_SENSOR_STATE_MAP_MODE=4,
    VALID_SENSOR_STATE_MAP_MODE=5,
    MUX_STATE_MAP_MODE=6,
}STATE_MAP_MODE;

typedef enum
{
    NO_CONTENT_DISPLAY_MODE =0,
    CHANNEL_NUM_DISPLAY_MODE =1,
    CAP_VALUE_DISPLAY_MODE =2,
    STATE_VALUE_DISPLAY_MODE =3,
}MAP_MODE_CONTENT_DISPLAY;

constexpr int MAPPING_STATE_NUM = LOCK_SENSOR_STATE_MAP_MODE +1;


typedef union {
    struct SensorState
    {
        uint32_t ch0:4;
        uint32_t ch1:4;
        uint32_t ch2:4;
        uint32_t ch3:4;
        uint32_t ch4:4;
        uint32_t ch5:4;
        uint32_t ch6:4;
        uint32_t ch7:4;
    }SensorState;
    uint32_t stateReg;
}StateRegUnion;


typedef enum{
    VOLTAGE_DIRECT_ENUM = 0,
    VOLTAGE_TRIANGULAR_ENUM = 1,
    VOLTAGE_SINWAVE_ENUM = 2,
}VOLTAGE_TYPE_ENUM;

typedef enum{
    VOLTAGE_FREQ_SEVEN_P_EIGHT_HZ_ENUM = 0,
}VOLTAGE_FREQ_ENUM;


enum MEMBRANE_SIMULATION_ENUM
{
    MEMBRANE_SIMULATION_ELECTROCHEMISTRY,
    MEMBRANE_SIMULATION_POLYMER,
};
enum RECORD_FILE_TYPE_ENUM
{
    RECORD_DEGATE_FILE = 0,
    RECORD_READS_ADAPTERS_FILE,
    RECORD_VALID_FILE,
    RECORD_MUX_FILE,
    RECORD_PORE_FILE,
};
enum LOG_FILE_TYPE_ENUM
{
    LOG_DEGATE_FILE = 0,
    LOG_READS_ADAPTERS_FILE,
    LOG_VALID_FILE,
    LOG_MUX_FILE,
};
enum RECORD_FILE_OPERT_TYPE_ENUM
{
    RECORD_FILE_OPEN = 0,
    RECORD_FILE_CLOSE,
    RECORD_FILE_RECORD,
};
enum RECORD_DEGATE_STATE_ENUM{
    RECORD_NONE_DEGATE_STATE= 0,
    RECORD_IS_DEGATE_STATE= 1,
};
//#define DISABLE false
//#define ENABLE true

#define CHECKED true
#define UNCHECKED false


constexpr int LVDS_HARD_MAP_ROWS = 16;
constexpr int LVDS_HARD_MAP_COLS = 64;

constexpr int MAPPING_ROW = 32;
constexpr int MAPPING_COLUMN = 32;
constexpr int CHANNEL_GET_BY_INDEX_ARRAY[MAPPING_ROW][MAPPING_COLUMN] = {
{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 },
{ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63 },
{ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95 },
{ 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127 },
{ 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159 },
{ 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191 },
{ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223 },
{ 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 },
{ 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287 },
{ 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319 },
{ 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351 },
{ 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383 },
{ 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415 },
{ 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447 },
{ 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479 },
{ 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511 },
{ 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543 },
{ 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575 },
{ 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607 },
{ 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639 },
{ 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671 },
{ 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703 },
{ 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735 },
{ 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767 },
{ 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799 },
{ 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831 },
{ 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863 },
{ 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895 },
{ 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927 },
{ 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959 },
{ 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991 },
{ 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023 },
};

constexpr int UNORDERCHANNEL_GET_BY_INDEX_ARRAY[MAPPING_ROW][MAPPING_COLUMN] = {
    { 15,  31,  47,  63,  79,  95, 111, 127, 143, 159, 175, 191, 207, 223, 239, 255, 271, 287, 303, 319, 335, 351, 367, 383, 399, 415, 431, 447, 463, 479, 495, 511 },
    { 14,  30,  46,  62,  78,  94, 110, 126, 142, 158, 174, 190, 206, 222, 238, 254, 270, 286, 302, 318, 334, 350, 366, 382, 398, 414, 430, 446, 462, 478, 494, 510 },
    { 13,  29,  45,  61,  77,  93, 109, 125, 141, 157, 173, 189, 205, 221, 237, 253, 269, 285, 301, 317, 333, 349, 365, 381, 397, 413, 429, 445, 461, 477, 493, 509 },
    { 12,  28,  44,  60,  76,  92, 108, 124, 140, 156, 172, 188, 204, 220, 236, 252, 268, 284, 300, 316, 332, 348, 364, 380, 396, 412, 428, 444, 460, 476, 492, 508 },
    { 11,  27,  43,  59,  75,  91, 107, 123, 139, 155, 171, 187, 203, 219, 235, 251, 267, 283, 299, 315, 331, 347, 363, 379, 395, 411, 427, 443, 459, 475, 491, 507 },
    { 10,  26,  42,  58,  74,  90, 106, 122, 138, 154, 170, 186, 202, 218, 234, 250, 266, 282, 298, 314, 330, 346, 362, 378, 394, 410, 426, 442, 458, 474, 490, 506 },
    {  9,  25,  41,  57,  73,  89, 105, 121, 137, 153, 169, 185, 201, 217, 233, 249, 265, 281, 297, 313, 329, 345, 361, 377, 393, 409, 425, 441, 457, 473, 489, 505 },
    {  8,  24,  40,  56,  72,  88, 104, 120, 136, 152, 168, 184, 200, 216, 232, 248, 264, 280, 296, 312, 328, 344, 360, 376, 392, 408, 424, 440, 456, 472, 488, 504 },
    {  7,  23,  39,  55,  71,  87, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247, 263, 279, 295, 311, 327, 343, 359, 375, 391, 407, 423, 439, 455, 471, 487, 503 },
    {  6,  22,  38,  54,  70,  86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246, 262, 278, 294, 310, 326, 342, 358, 374, 390, 406, 422, 438, 454, 470, 486, 502 },
    {  5,  21,  37,  53,  69,  85, 101, 117, 133, 149, 165, 181, 197, 213, 229, 245, 261, 277, 293, 309, 325, 341, 357, 373, 389, 405, 421, 437, 453, 469, 485, 501 },
    {  4,  20,  36,  52,  68,  84, 100, 116, 132, 148, 164, 180, 196, 212, 228, 244, 260, 276, 292, 308, 324, 340, 356, 372, 388, 404, 420, 436, 452, 468, 484, 500 },
    {  3,  19,  35,  51,  67,  83,  99, 115, 131, 147, 163, 179, 195, 211, 227, 243, 259, 275, 291, 307, 323, 339, 355, 371, 387, 403, 419, 435, 451, 467, 483, 499 },
    {  2,  18,  34,  50,  66,  82,  98, 114, 130, 146, 162, 178, 194, 210, 226, 242, 258, 274, 290, 306, 322, 338, 354, 370, 386, 402, 418, 434, 450, 466, 482, 498 },
    {  1,  17,  33,  49,  65,  81,  97, 113, 129, 145, 161, 177, 193, 209, 225, 241, 257, 273, 289, 305, 321, 337, 353, 369, 385, 401, 417, 433, 449, 465, 481, 497 },
    {  0,  16,  32,  48,  64,  80,  96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 352, 368, 384, 400, 416, 432, 448, 464, 480, 496 },
    {527, 543, 559, 575, 591, 607, 623, 639, 655, 671, 687, 703, 719, 735, 751, 767, 783, 799, 815, 831, 847, 863, 879, 895, 911, 927, 943, 959, 975, 991,1007,1023 },
    {526, 542, 558, 574, 590, 606, 622, 638, 654, 670, 686, 702, 718, 734, 750, 766, 782, 798, 814, 830, 846, 862, 878, 894, 910, 926, 942, 958, 974, 990,1006,1022 },
    {525, 541, 557, 573, 589, 605, 621, 637, 653, 669, 685, 701, 717, 733, 749, 765, 781, 797, 813, 829, 845, 861, 877, 893, 909, 925, 941, 957, 973, 989,1005,1021 },
    {524, 540, 556, 572, 588, 604, 620, 636, 652, 668, 684, 700, 716, 732, 748, 764, 780, 796, 812, 828, 844, 860, 876, 892, 908, 924, 940, 956, 972, 988,1004,1020 },
    {523, 539, 555, 571, 587, 603, 619, 635, 651, 667, 683, 699, 715, 731, 747, 763, 779, 795, 811, 827, 843, 859, 875, 891, 907, 923, 939, 955, 971, 987,1003,1019 },
    {522, 538, 554, 570, 586, 602, 618, 634, 650, 666, 682, 698, 714, 730, 746, 762, 778, 794, 810, 826, 842, 858, 874, 890, 906, 922, 938, 954, 970, 986,1002,1018 },
    {521, 537, 553, 569, 585, 601, 617, 633, 649, 665, 681, 697, 713, 729, 745, 761, 777, 793, 809, 825, 841, 857, 873, 889, 905, 921, 937, 953, 969, 985,1001,1017 },
    {520, 536, 552, 568, 584, 600, 616, 632, 648, 664, 680, 696, 712, 728, 744, 760, 776, 792, 808, 824, 840, 856, 872, 888, 904, 920, 936, 952, 968, 984,1000,1016 },
    {519, 535, 551, 567, 583, 599, 615, 631, 647, 663, 679, 695, 711, 727, 743, 759, 775, 791, 807, 823, 839, 855, 871, 887, 903, 919, 935, 951, 967, 983, 999,1015 },
    {518, 534, 550, 566, 582, 598, 614, 630, 646, 662, 678, 694, 710, 726, 742, 758, 774, 790, 806, 822, 838, 854, 870, 886, 902, 918, 934, 950, 966, 982, 998,1014 },
    {517, 533, 549, 565, 581, 597, 613, 629, 645, 661, 677, 693, 709, 725, 741, 757, 773, 789, 805, 821, 837, 853, 869, 885, 901, 917, 933, 949, 965, 981, 997,1013 },
    {516, 532, 548, 564, 580, 596, 612, 628, 644, 660, 676, 692, 708, 724, 740, 756, 772, 788, 804, 820, 836, 852, 868, 884, 900, 916, 932, 948, 964, 980, 996,1012 },
    {515, 531, 547, 563, 579, 595, 611, 627, 643, 659, 675, 691, 707, 723, 739, 755, 771, 787, 803, 819, 835, 851, 867, 883, 899, 915, 931, 947, 963, 979, 995,1011 },
    {514, 530, 546, 562, 578, 594, 610, 626, 642, 658, 674, 690, 706, 722, 738, 754, 770, 786, 802, 818, 834, 850, 866, 882, 898, 914, 930, 946, 962, 978, 994,1010 },
    {513, 529, 545, 561, 577, 593, 609, 625, 641, 657, 673, 689, 705, 721, 737, 753, 769, 785, 801, 817, 833, 849, 865, 881, 897, 913, 929, 945, 961, 977, 993,1009 },
    {512, 528, 544, 560, 576, 592, 608, 624, 640, 656, 672, 688, 704, 720, 736, 752, 768, 784, 800, 816, 832, 848, 864, 880, 896, 912, 928, 944, 960, 976, 992,1008 },
};

constexpr int LVDS_HARDWARE_INDEX_ARRAY[LVDS_HARD_MAP_ROWS][LVDS_HARD_MAP_COLS] =
{
    {15,31,47,63,79,95,111,127,143,159,175,191,207,223,239,255,271,287,303,319,335,351,367,383,399,415,431,447,463,479,495,511,527,543,559,575,591,607,623,639,655,671,687,703,719,735,751,767,783,799,815,831,847,863,879,895,911,927,943,959,975,991,1007,1023 },
    {14,30,46,62,78,94,110,126,142,158,174,190,206,222,238,254,270,286,302,318,334,350,366,382,398,414,430,446,462,478,494,510,526,542,558,574,590,606,622,638,654,670,686,702,718,734,750,766,782,798,814,830,846,862,878,894,910,926,942,958,974,990,1006,1022 },
    {13,29,45,61,77,93,109,125,141,157,173,189,205,221,237,253,269,285,301,317,333,349,365,381,397,413,429,445,461,477,493,509,525,541,557,573,589,605,621,637,653,669,685,701,717,733,749,765,781,797,813,829,845,861,877,893,909,925,941,957,973,989,1005,1021 },
    {12,28,44,60,76,92,108,124,140,156,172,188,204,220,236,252,268,284,300,316,332,348,364,380,396,412,428,444,460,476,492,508,524,540,556,572,588,604,620,636,652,668,684,700,716,732,748,764,780,796,812,828,844,860,876,892,908,924,940,956,972,988,1004,1020 },
    {11,27,43,59,75,91,107,123,139,155,171,187,203,219,235,251,267,283,299,315,331,347,363,379,395,411,427,443,459,475,491,507,523,539,555,571,587,603,619,635,651,667,683,699,715,731,747,763,779,795,811,827,843,859,875,891,907,923,939,955,971,987,1003,1019 },
    {10,26,42,58,74,90,106,122,138,154,170,186,202,218,234,250,266,282,298,314,330,346,362,378,394,410,426,442,458,474,490,506,522,538,554,570,586,602,618,634,650,666,682,698,714,730,746,762,778,794,810,826,842,858,874,890,906,922,938,954,970,986,1002,1018 },
    { 9,25,41,57,73,89,105,121,137,153,169,185,201,217,233,249,265,281,297,313,329,345,361,377,393,409,425,441,457,473,489,505,521,537,553,569,585,601,617,633,649,665,681,697,713,729,745,761,777,793,809,825,841,857,873,889,905,921,937,953,969,985,1001,1017 },
    { 8,24,40,56,72,88,104,120,136,152,168,184,200,216,232,248,264,280,296,312,328,344,360,376,392,408,424,440,456,472,488,504,520,536,552,568,584,600,616,632,648,664,680,696,712,728,744,760,776,792,808,824,840,856,872,888,904,920,936,952,968,984,1000,1016 },
    { 7,23,39,55,71,87,103,119,135,151,167,183,199,215,231,247,263,279,295,311,327,343,359,375,391,407,423,439,455,471,487,503,519,535,551,567,583,599,615,631,647,663,679,695,711,727,743,759,775,791,807,823,839,855,871,887,903,919,935,951,967,983, 999,1015 },
    { 6,22,38,54,70,86,102,118,134,150,166,182,198,214,230,246,262,278,294,310,326,342,358,374,390,406,422,438,454,470,486,502,518,534,550,566,582,598,614,630,646,662,678,694,710,726,742,758,774,790,806,822,838,854,870,886,902,918,934,950,966,982, 998,1014 },
    { 5,21,37,53,69,85,101,117,133,149,165,181,197,213,229,245,261,277,293,309,325,341,357,373,389,405,421,437,453,469,485,501,517,533,549,565,581,597,613,629,645,661,677,693,709,725,741,757,773,789,805,821,837,853,869,885,901,917,933,949,965,981, 997,1013 },
    { 4,20,36,52,68,84,100,116,132,148,164,180,196,212,228,244,260,276,292,308,324,340,356,372,388,404,420,436,452,468,484,500,516,532,548,564,580,596,612,628,644,660,676,692,708,724,740,756,772,788,804,820,836,852,868,884,900,916,932,948,964,980, 996,1012 },
    { 3,19,35,51,67,83, 99,115,131,147,163,179,195,211,227,243,259,275,291,307,323,339,355,371,387,403,419,435,451,467,483,499,515,531,547,563,579,595,611,627,643,659,675,691,707,723,739,755,771,787,803,819,835,851,867,883,899,915,931,947,963,979, 995,1011 },
    { 2,18,34,50,66,82, 98,114,130,146,162,178,194,210,226,242,258,274,290,306,322,338,354,370,386,402,418,434,450,466,482,498,514,530,546,562,578,594,610,626,642,658,674,690,706,722,738,754,770,786,802,818,834,850,866,882,898,914,930,946,962,978, 994,1010 },
    { 1,17,33,49,65,81, 97,113,129,145,161,177,193,209,225,241,257,273,289,305,321,337,353,369,385,401,417,433,449,465,481,497,513,529,545,561,577,593,609,625,641,657,673,689,705,721,737,753,769,785,801,817,833,849,865,881,897,913,929,945,961,977, 993,1009 },
    { 0,16,32,48,64,80, 96,112,128,144,160,176,192,208,224,240,256,272,288,304,320,336,352,368,384,400,416,432,448,464,480,496,512,528,544,560,576,592,608,624,640,656,672,688,704,720,736,752,768,784,800,816,832,848,864,880,896,912,928,944,960,976, 992,1008 },
};

namespace Cyclone
{
    struct RegField
    {
        int fieldId;
        QString fieldName;
        QString mode;
        QString defalValStr;
        QString valueStr;
        QString bitsStr;
        QString descrStr;
        int regId;
        RegField(int id_,const QString &fieldName_,const QString & mode_,const QString & defalVue_,const QString & bitsStr_,const QString & valueStr_,const QString &descrStr_,const int &regId_)
            :fieldId(id_),fieldName(fieldName_), mode(mode_), defalValStr(defalVue_),\
              bitsStr(bitsStr_),valueStr(valueStr_),descrStr(descrStr_),regId(regId_)
        {

        }
    };

    typedef struct RegisterStr
    {
        int id;
        QString name;
        QString addr;
        int size;
        QString defalVue;
        QString value;
        QString fieldTabStr;
        QVector<RegField> vctField;

        RegisterStr(int id_,const QString & name_,const QString & addr_,const QString & defalVue_,const int &size_,const QString & value_,const QString &fieldTabStr_,QVector<RegField> &vctField_)
            :id(id_),name(name_), addr(addr_), defalVue(defalVue_),size(size_),value(value_),fieldTabStr(fieldTabStr_)
        {
            vctField.swap(vctField_);
        }
    }RegisterStr;


    inline void Print(const RegisterStr& RegisterStr)
    {
        qDebug() << "=================================================";
        qDebug() << "Reg id: " << RegisterStr.id ;
        qDebug() << "\tname: " << RegisterStr.name ;
        qDebug() << "\taddr: " << RegisterStr.addr ;
        qDebug() << "\tdefalVue: " << RegisterStr.defalVue ;
        qDebug() << "\tsize: " << RegisterStr.size ;
        qDebug() << "\tvalue: " << RegisterStr.value ;
        qDebug() << "\tvalue: " << RegisterStr.fieldTabStr ;

        for(auto &&field : RegisterStr.vctField)
        {
            qDebug() << "";
            qDebug() << "\t\tfield id: " << field.fieldId ;
            qDebug() << "\t\tfield fieldName: " << field.fieldName ;
            qDebug() << "\t\tmode: " << field.mode ;
            qDebug() << "\t\tdefalValStr: " << field.defalValStr ;
            qDebug() << "\t\tvalueStr: " << field.valueStr ;
            qDebug() << "\t\tbitsStr: " << field.bitsStr ;
            qDebug() << "\t\tregId: " << field.regId ;
        }
    }


    typedef struct RegIdItemSimp
    {
        int id;
        QString name;
        QString addr;
        int size;
        QString defalVue;
        QString value;
        QString fieldTabStr;
    }RegIdItemSimp;


    typedef enum
    {
        INSERT_DLG = 0,
        MODIFY_DLG,
    } DLG_TYPE_ENUM;

}

